package mnj.mfg.model.lovs;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 30 12:16:54 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class patternLovRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Pattern {
            public Object get(patternLovRowImpl obj) {
                return obj.getPattern();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setPattern((String)value);
            }
        }
        ,
        LengthFrom {
            public Object get(patternLovRowImpl obj) {
                return obj.getLengthFrom();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setLengthFrom((Number)value);
            }
        }
        ,
        LengthTo {
            public Object get(patternLovRowImpl obj) {
                return obj.getLengthTo();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setLengthTo((Number)value);
            }
        }
        ,
        WidthFrom {
            public Object get(patternLovRowImpl obj) {
                return obj.getWidthFrom();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setWidthFrom((Number)value);
            }
        }
        ,
        WidthTo {
            public Object get(patternLovRowImpl obj) {
                return obj.getWidthTo();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setWidthTo((Number)value);
            }
        }
        ,
        FlexValue {
            public Object get(patternLovRowImpl obj) {
                return obj.getFlexValue();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setFlexValue((String)value);
            }
        }
        ,
        Description {
            public Object get(patternLovRowImpl obj) {
                return obj.getDescription();
            }

            public void put(patternLovRowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(patternLovRowImpl object);

        public abstract void put(patternLovRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PATTERN = AttributesEnum.Pattern.index();
    public static final int LENGTHFROM = AttributesEnum.LengthFrom.index();
    public static final int LENGTHTO = AttributesEnum.LengthTo.index();
    public static final int WIDTHFROM = AttributesEnum.WidthFrom.index();
    public static final int WIDTHTO = AttributesEnum.WidthTo.index();
    public static final int FLEXVALUE = AttributesEnum.FlexValue.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();

    /**
     * This is the default constructor (do not remove).
     */
    public patternLovRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Pattern.
     * @return the Pattern
     */
    public String getPattern() {
        return (String) getAttributeInternal(PATTERN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Pattern.
     * @param value value to set the  Pattern
     */
    public void setPattern(String value) {
        setAttributeInternal(PATTERN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LengthFrom.
     * @return the LengthFrom
     */
    public Number getLengthFrom() {
        return (Number) getAttributeInternal(LENGTHFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LengthFrom.
     * @param value value to set the  LengthFrom
     */
    public void setLengthFrom(Number value) {
        setAttributeInternal(LENGTHFROM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LengthTo.
     * @return the LengthTo
     */
    public Number getLengthTo() {
        return (Number) getAttributeInternal(LENGTHTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LengthTo.
     * @param value value to set the  LengthTo
     */
    public void setLengthTo(Number value) {
        setAttributeInternal(LENGTHTO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WidthFrom.
     * @return the WidthFrom
     */
    public Number getWidthFrom() {
        return (Number) getAttributeInternal(WIDTHFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WidthFrom.
     * @param value value to set the  WidthFrom
     */
    public void setWidthFrom(Number value) {
        setAttributeInternal(WIDTHFROM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WidthTo.
     * @return the WidthTo
     */
    public Number getWidthTo() {
        return (Number) getAttributeInternal(WIDTHTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WidthTo.
     * @param value value to set the  WidthTo
     */
    public void setWidthTo(Number value) {
        setAttributeInternal(WIDTHTO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FlexValue.
     * @return the FlexValue
     */
    public String getFlexValue() {
        return (String) getAttributeInternal(FLEXVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FlexValue.
     * @param value value to set the  FlexValue
     */
    public void setFlexValue(String value) {
        setAttributeInternal(FLEXVALUE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Description.
     * @return the Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Description.
     * @param value value to set the  Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
